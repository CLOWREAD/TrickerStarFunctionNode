@TEST
INPUT RUN : EXECUTE
INPUT V : string
OUTPUT INVOKE : EXECUTE 
-------------------
public dynamic @TRICKER_STAR_FUNCTIONNAME (dynamic param)
{

System.Collections.Generic.Dictionary<String, Object> GLOBAL_OUTPUT = param.GLOBAL_OUTPUT;

TRICKER_STAR_INPUT(V)

dynamic d=new System.Dynamic.ExpandoObject();
d.FUNCTIONNAMETOINVOKE=TRICKER_STAR_INVOKE(INVOKE);



return d;
}



@MAIN
INPUT API_NAME : INSTANCE_VALUE
OUTPUT INVOKE : EXECUTE 
-------------------
public void TRICKER_STAR_INSTANCE_VALUE(API_NAME) (dynamic param)
{
            System.Collections.Generic.Dictionary<String, Object> result = new Dictionary<string, object>();
            var this_type = this.GetType();
            String F_Name_invoking = TRICKER_STAR_INVOKE(INVOKE);
            var method=this_type.GetMethod(F_Name_invoking);
            dynamic d = new System.Dynamic.ExpandoObject();

          while (F_Name_invoking != null && F_Name_invoking.Length != 0 )
            {
                d = new System.Dynamic.ExpandoObject();
                d.GLOBAL_OUTPUT = result;
                dynamic invoke_res =method.Invoke(this, new object[]{d});
                result[F_Name_invoking] = invoke_res;
                if(invoke_res.FUNCTIONNAMETOINVOKE==null)
                 {
                     break;
                 } 
                F_Name_invoking = invoke_res.FUNCTIONNAMETOINVOKE;
                method = this_type.GetMethod(F_Name_invoking);
            }
}



@TEST
INPUT RUN : EXECUTE
INPUT V : INSTANCE_VALUE
OUTPUT INVOKE : EXECUTE 
OUTPUT V :  string
-------------------
public dynamic @TRICKER_STAR_FUNCTIONNAME (dynamic param)
{
  String V=  "TRICKER_STAR_INSTANCE_VALUE(V)"
System.Collections.Generic.Dictionary<String, Object> GLOBAL_OUTPUT = param.GLOBAL_OUTPUT;

Console.Write(V);

dynamic d=new System.Dynamic.ExpandoObject();
d.FUNCTIONNAMETOINVOKE=TRICKER_STAR_INVOKE(INVOKE);
d.V=V.ToString();

return d;
}
